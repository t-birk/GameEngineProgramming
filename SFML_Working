#include <SFML/Graphics.hpp>
#include <iostream>

int main(int argc, char * argv[]) {
  const int wWidth = 640;
  const int wHeight = 480;
  sf::RenderWindow window(sf::VideoMode(wWidth, wHeight), "SFML works!");
  window.setFramerateLimit(60);

  sf::CircleShape circle(50);
  circle.setFillColor(sf::Color::Green);
  circle.setPosition(300.f, 300.f);
  float circleMoveSpeed = 2.f;

  float rx = 300;
  float ry = 200;
  sf::Vector2f rSize(rx, ry);
  sf::RectangleShape rect(rSize);
  rect.setPosition(100,5);
  rect.setFillColor(sf::Color::Yellow);

  /*
   * Window W H
   * Font F S R G B
   * Rectangle N X Y SX SY R G B W H
   * Circle N X Y SX SY R G B R
   *
   * shape.getLocalBounds() gives local bounds relative to shape.getPosition() as well as the width, height size of the rectangle
   * text.getLocalBounds() behaves similarly
   * use std::ifstream
   *
   *
   */



  std::ifstream infile("config.txt");
  char buffer[100];
  const int wWidth;
  const int wHeight;
  infile >> buffer >> wWidth >> wHeight;
  sf::RenderWindow window(sf::VideoMode(wWidth, wHeight), "A1");
  window.setFramerateLimit(24);

  sf::Font myFont;
  


  



  sf::Font myFont;
  if (!myFont.loadFromFile("fonts/Roboto-Regular.ttf")) {
    std::cerr << "Could not load font!\n";
    exit(-1);
  }

  sf::Text text("Sample Text", myFont, 24);
  text.setPosition(0, wHeight - (float)text.getCharacterSize() - 5);

  std::vector<sf::CircleShape> circles;
  circles.push_back(circle);
  std::vector<sf::RectangleShape> rectangles;
  rectangles.push_back(rect);

  while (window.isOpen()) {
    sf::Event event;
    while (window.pollEvent(event)) {
      if (event.type == sf::Event::Closed) window.close();
      if (event.type == sf::Event::KeyPressed) {
        std::cout << "Key pressed with code = " << event.key.code << "\n";
        if (event.key.code == sf::Keyboard::X) circleMoveSpeed *= -1.f;

      }
    }
    circle.setPosition(circle.getPosition().x - circleMoveSpeed, circle.getPosition().y - circleMoveSpeed);

    window.clear();
    for (auto& c: circles) {
      window.draw(c);
    }
    for (auto& r: rectangles) {
      window.draw(rect);
    }1
    window.draw(circle);
    window.draw(text);
    window.draw(rect);
    window.display();
  }
  
  return 0;

}
